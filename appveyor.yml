# ============================================================================================
# For windows-only code, we use the cmd: prefix - linux/macOS VMs ignore this.
# We also use PowerShell code with the $isLinux flag to do linux-only scripting.
#
# Using cibuildwheel
# ------------------
# Creating macOS binaries is a bit tricky because setuptools/python will use the
# macOS SDK that Python was built with. SDKs are backwards compatible, so the older
# SDK used the more users are catered for with one binary. The problem is that package
# managers like Homebrew have python binaries that are built with the latest SDK present.
# So, e.g., the Python binary from Homebrew on macOS 10.15 will use the 10.15 SDK.
# Appveyor has the latest macOS, and appears to have Python binaries from Homebrew.
# The binaries from Python.org, however, are built with older SDKs so as many OS versions
# as possible are supported. So, we want to build our wheels with the Python.org python installs.
#
# cibuildwheel does this for us. It will install the Python.org binaries and do the wheel build
# and then test. The tool is pretty simple and I think it is safe to rely on it.
#
# cibuildwheel also supports windows builds. It downloads nuget windows python binaries
# and runs the wheel building in vitrualenvs. This is nicer that listing an Appveyor
# job for every windows wheel, so I've decided to use cibuildwheel for windows too.
#
# We aren't using cibuildwheel for Linux because we only do a source distribution for linux
# and cibuildwheel doesn't support NOT building wheels. It also needs a manylinux VM to run.
#
# Hacking the options
# -------------------
# One issue with cibuildwheel is that it insists on installing the wheels it builds locally
# and running the tests. There is no explicit option to specify different install behavior
# (like, e.g., uploading to testpypi and installing from there). So I have abused the
# CIBW_REPAIR_WHEEL_COMMAND, CIBW_BEFORE_TEST and CIBW_TEST_COMMAND options to (when desired)
# upload to testpypi, uninstall the local install and install from pypi all before running
# the tests.

matrix:
  fast_finish: true

environment:
  testpypi_pw:
    secure: /Wa2jI4VqSUhZRCL2vxfb9y36bGjzg+oN5Jm5g+/8jxcekWfv3YkEdF51D2+X/gT5m6rDXIYCLJixDBP4sIHsyULuhyGS9MATmakFhPT2fXvaaXiR2Rjpkt36w1m/Hv2Gz7t6xMljCbIREDJGYtNF1GCMm3a5HrtWiUl7zVI+198cLMEjfw0ZjcUBccHYaPf77boJwaxJRzwR3VBFNjbFiLOq5WyxJR8ava2yVsnMAFJUKo8w3BKVr1AMD/0bCKE

  matrix:


  # ============================================================================================
  # Windows builds.
  # We use cibuildwheel.
  #
  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
    CIBW_BUILD: cp39-win32 cp39-win_amd64
    CIBW_BUILD_VERBOSITY: 2
    WIN_LATEST_PYTHON: "C:\\Python38-x64"
    PYPI_DELAY_CMD: "TIMEOUT 420"
    
  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
    CIBW_BUILD: cp37-win32 cp37-win_amd64 cp38-win32 cp38-win_amd64
    CIBW_BUILD_VERBOSITY: 2
    WIN_LATEST_PYTHON: "C:\\Python38-x64"
    PYPI_DELAY_CMD: "TIMEOUT 420"

  - APPVEYOR_BUILD_WORKER_IMAGE: Visual Studio 2019
    CIBW_BUILD: cp35-win32 cp35-win_amd64 cp36-win32 cp36-win_amd64
    CIBW_BUILD_VERBOSITY: 2
    WIN_LATEST_PYTHON: "C:\\Python38-x64"
    PYPI_DELAY_CMD: "TIMEOUT 420"

  # ============================================================================================
  # MacOS builds.
  #
  # We use cibuildwheel.
  #
  - APPVEYOR_BUILD_WORKER_IMAGE: macos-mojave
    CIBW_BUILD: cp39-macosx_x86_64
    CIBW_BUILD_VERBOSITY: 2
    PYPI_DELAY_CMD: "SLEEP 420"

  - APPVEYOR_BUILD_WORKER_IMAGE: macos-mojave
    CIBW_BUILD: cp27-macosx_x86_64 cp35-macosx_x86_64 cp36-macosx_x86_64 cp37-macosx_x86_64 cp38-macosx_x86_64
    CIBW_BUILD_VERBOSITY: 2
    PYPI_DELAY_CMD: "SLEEP 420"


  # ============================================================================================
  # Linux builds.
  #
  # We use the pre-installed python virtual environments to do all our Linux building/testing
  # in one job.
  - APPVEYOR_BUILD_WORKER_IMAGE: Ubuntu
    LINUX_VENVS: venv2.7,venv3.5,venv3.6,venv3.7,venv3.8,venv3.9


# Need to make sure initial setup is done with latest python (especially for cibuildwheel)
stack: python 3.8


install:

  # Set the build name and alpha release number
  - ps: |

      $base_version = Get-Content .\VERSION
      $base_version | Select-Object -First 1

      if (Test-Path env:is_release_build)
      {
          Update-AppveyorBuild -Version "$env:APPVEYOR_REPO_BRANCH-$($base_version)rc$env:APPVEYOR_BUILD_NUMBER"
      }
      else
      {
          Update-AppveyorBuild -Version "$env:APPVEYOR_REPO_BRANCH-$($base_version)a$env:APPVEYOR_BUILD_NUMBER"

          <#
          If the package files need extra information in the version field,
          a file called ALPHA with the string to append must be written to
          the root of the project. This will occur unless the environment
          variable is_release_build is set.
          #>
          Set-Content -Path .\ALPHA -Value "a$env:APPVEYOR_BUILD_NUMBER"
      }


  # Need to make sure initial setup is done with latest python (especially for cibuildwheel)
  # This cmd is windows-specific.
  - cmd: "SET PATH=%WIN_LATEST_PYTHON%;%WIN_LATEST_PYTHON%\\Scripts;%PATH%"
  
  # Check that we have the expected version for Python
  - "python --version"

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date on windows.
  - cmd: "python -m pip install --upgrade pip"

  - ps: |

      <#

      Set up cibuildwheel environment variables.
      If we are installing locally, this just requires setting the test script.
      If we want to install from testpypi, we need to store the built wheel in our own dir,
      make sure the wheel is present in the "repaired wheel" dir (because when we set our
      own CIBW_REPAIR_WHEEL_COMMAND, cibuildwheel still expects this file to exist but doesn't
      do it itself), upload to testpypi, then uninstall the local version that cibuildwheel
      installs just before the test command is run, install from testpypi and then finally
      run our actual tests.

      Note that the {wheel} file path placeholder isn't accessible at all parts of the flow,
      so that is why CIBW_REPAIR_WHEEL_COMMAND is being used.

      #>
      if (-Not $isLinux)
      {
          if (Test-Path env:install_from_pypi)
          {
              $install_version = python setup.py --version
              Set-Item -Path Env:CIBW_REPAIR_WHEEL_COMMAND -Value ("rm -rf upload_dir && mkdir upload_dir && cp {wheel} upload_dir && cp {wheel} {dest_dir}")
              Set-Item -Path Env:CIBW_BEFORE_TEST -Value ("pip install --upgrade twine && twine upload --repository testpypi -u __token__ -p " + $env:testpypi_pw + " upload_dir/* && " + $env:PYPI_DELAY_CMD)
              Set-Item -Path Env:CIBW_TEST_COMMAND -Value ("pip uninstall -y fpbinary && pip install -I --pre --index-url https://test.pypi.org/simple/ --no-deps fpbinary==" + $install_version + " && cd {project} && pip install numpy && pip install --use-wheel scipy && python -m unittest discover -s tests -p testFpBinary*")
          }
          else
          {
              Set-Item -Path Env:CIBW_TEST_COMMAND -Value ("cd {project} && pip install numpy && pip install --use-wheel scipy && python -m unittest discover -s tests -p testFpBinary*")
          }

          python -m pip install cibuildwheel
      }


build_script:
  
  # ============================================================================================
  # Linux builds.
  #
  # We only do a source distribution for Linux, so we use the latest python version virtual env
  # to build the source dist.
  #
  # macOS builds.
  # Just run cibuildwheel - it gets everything from the env variables previously set.
  #
  - ps: |
      if ($isLinux)
      {
          python -m pip install --upgrade wheel
          python setup.py sdist --formats=zip

          <# Linux doesn't use cibuildwheel, so need to do the wheel upload here. #>
          if (Test-Path env:install_from_pypi)
          {
              python -m pip install --upgrade twine
              python -m twine upload --repository testpypi -u __token__ -p "$env:testpypi_pw" dist/*
              Start-Sleep -s 420
          }
      }
      elseif (-Not $isWindows)
      {
          python -m cibuildwheel --output-dir dist
      }

  # ============================================================================================
  # Windoes builds.
  # Also uses cibuildwheel to do everything, but we can't run the wheel build in PowerShell
  # because it errors out on compiler flag warnings (https://github.com/pypa/pip/issues/3383).
  # Windows cmd doesn't error out on the warnings, so using cmd for windows.
  - cmd: python -m cibuildwheel --output-dir dist


  # ============================================================================================
  # All builds.
  #
  # Upload files to test pypi if requested.
  - ps: |



test_script:

  # ============================================================================================
  # Windows and macOS builds.
  #
  # Tests are specified in env variables for cibuildwheel to do the tests as part of the build
  # process.


  # ============================================================================================
  # Linux builds.
  #
  # For each python version, we use pip to install the source distribution in the dist directory.
  - ps: |
      if ($isLinux)
      {
          $ar = $env:LINUX_VENVS.Split(",")
          Foreach ($e in $ar)
          {
              . $HOME/$e/bin/activate.ps1

              pip install numpy
              pip install --use-wheel scipy

              if (Test-Path env:install_from_pypi)
              {
                  $install_version = python setup.py --version
                  pip install -I --pre --index-url https://test.pypi.org/simple/ --no-deps fpbinary=="$install_version"
              }
              else
              {
                  pip install fpbinary --no-index --find-links dist/
              }

              python -m unittest discover -s tests -p testFpBinary*
          }
      }

 
artifacts:
  - path: dist\*

